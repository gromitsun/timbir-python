XT_AMatrix.c:    r = x*SinogramPtr->cosine[proj_idx] - y*SinogramPtr->sine[proj_idx];
XT_AMatrix.c:    if(rmax < SinogramPtr->R0 || rmin > SinogramPtr->RMax){
XT_AMatrix.c:    index_min = (int32_t)(floor(((rmin - SinogramPtr->R0)/SinogramPtr->delta_r)));
XT_AMatrix.c:    index_max = (int32_t)(floor((rmax - SinogramPtr->R0)/SinogramPtr->delta_r));
XT_AMatrix.c:    if(index_max >= SinogramPtr->N_r)
XT_AMatrix.c:      index_max = SinogramPtr->N_r - 1;
XT_AMatrix.c:      R_Center = (SinogramPtr->R0 + (((Real_t)j) + 0.5) *(SinogramPtr->delta_r));/*the 0.5 is to get to the center of the detector*/
XT_AMatrix.c:      index_delta_r = (int32_t)(floor((delta_r/SinogramPtr->OffsetR)));
XT_AMatrix.c:            w1 = delta_r - index_delta_r*SinogramPtr->OffsetR;
XT_AMatrix.c:	    w2 = SinogramPtr->OffsetR - w1;
XT_AMatrix.c:            f1 = (w2*DetectorResponse[proj_idx][index_delta_r] + w1*DetectorResponse[proj_idx][index_delta_r+1])/SinogramPtr->OffsetR;
XT_Engine.c:	multifree(SinogramPtr->ProjOffset,2);
XT_Engine.c:	multifree(SinogramPtr->ProjSelect,3);
XT_Engine.c:	dim[1] = SinogramPtr->N_p;
XT_Engine.c:	dim[2] = SinogramPtr->N_r;
XT_Engine.c:	dim[3] = SinogramPtr->N_t;
XT_Engine.c:		WriteMultiDimArray2Tiff (proj_file, dim, 0, 3, 1, 2, &(SinogramPtr->Projection[0][0][0]), 0, TomoInputsPtr->debug_file_ptr);
XT_genSinogram.c:    	ScanObj->N_z = TomoInputsPtr->phantom_N_z/SinogramPtr->total_t_slices*SinogramPtr->N_t;
XT_genSinogram.c:	if (TomoInputsPtr->phantom_N_xy % SinogramPtr->N_r != 0 || TomoInputsPtr->phantom_N_z % SinogramPtr->total_t_slices != 0){
XT_genSinogram.c:		printf("ERROR: genSinogramFromPhantom: N_r = %d does not divide phantom_N_xy = %d or N_t = %d does not divide phantom_N_z = %d\n", SinogramPtr->N_r, TomoInputsPtr->phantom_N_xy, SinogramPtr->total_t_slices, TomoInputsPtr->phantom_N_z);
XT_genSinogram.c:		stream_offset += (long int)(TomoInputsPtr->phantom_N_z/SinogramPtr->total_t_slices)*(long int)SinogramPtr->slice_begin;
XT_genSinogram.c:	dimTiff[0] = 1; dimTiff[1] = 1; dimTiff[2] = SinogramPtr->N_p; dimTiff[3] = DETECTOR_RESPONSE_BINS+1;
XT_genSinogram.c:	for (i=0; i < SinogramPtr->N_p; i++)
XT_genSinogram.c:	for (j=0; j < SinogramPtr->N_r; j++){
XT_genSinogram.c:	for (slice=0; slice < SinogramPtr->N_t; slice++)
XT_genSinogram.c:		val = SinogramPtr->Projection[i][j][slice];
XT_genSinogram.c:		SinogramPtr->Projection[i][j][slice] = log(EXPECTED_COUNTS_FOR_PHANTOM_DATA/TomoInputsPtr->Weight[i][j][slice]);			
XT_genSinogram.c:	Write2Bin (projection_file, 1, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t, &(SinogramPtr->Projection[0][0][0]), TomoInputsPtr->debug_file_ptr);
XT_genSinogram.c:	dimTiff[0] = 1; dimTiff[1] = SinogramPtr->N_p; dimTiff[2] = SinogramPtr->N_r; dimTiff[3] = SinogramPtr->N_t;
XT_genSinogram.c:		WriteMultiDimArray2Tiff (projection_file, dimTiff, 0, 3, 1, 2, &(SinogramPtr->Projection[0][0][0]), 0, TomoInputsPtr->debug_file_ptr);
XT_genSinogram.c:	Write2Bin (weight_file, 1, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t, &(TomoInputsPtr->Weight[0][0][0]), TomoInputsPtr->debug_file_ptr);
XT_genSinogram.c:	size=SinogramPtr->N_p*SinogramPtr->N_r*SinogramPtr->N_t;
XT_genSinogram.c:	Read4mBin (sinofile, 1, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t, &(SinogramPtr->Projection[0][0][0]), TomoInputsPtr->debug_file_ptr);
XT_genSinogram.c:	Read4mBin (weightfile, 1, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t, &(TomoInputsPtr->Weight[0][0][0]), TomoInputsPtr->debug_file_ptr);
XT_genSinogram.c:	for (i=0; i<SinogramPtr->N_p; i++){
XT_genSinogram.c:		for (k=0; k<SinogramPtr->N_r; k++){
XT_genSinogram.c:			for (slice=0; slice<SinogramPtr->N_t; slice++){
XT_genSinogram.c:				sino_avg += SinogramPtr->Projection[i][k][slice];
XT_genSinogram.c:	sino_avg = sino_avg/(SinogramPtr->N_p*SinogramPtr->N_r*SinogramPtr->N_t);
XT_genSinogram.c:	weight_avg = weight_avg/(SinogramPtr->N_p*SinogramPtr->N_r*SinogramPtr->N_t);
XT_genSinogram.c:	N_t = SinogramPtr->N_t;
XT_genSinogram.c:	N_r = SinogramPtr->N_r;
XT_genSinogram.c:	size=SinogramPtr->N_p*N_r*N_t*mult_xy*mult_z;
XT_genSinogram.c:	bright = (Real_t***)multialloc(sizeof(Real_t), 3, SinogramPtr->N_p, SinogramPtr->N_r*mult_xy, SinogramPtr->N_t*mult_z);
XT_genSinogram.c:	weight = (Real_t***)multialloc(sizeof(Real_t), 3, SinogramPtr->N_p, SinogramPtr->N_r*mult_xy, SinogramPtr->N_t*mult_z);
XT_genSinogram.c:	for (i=0; i<SinogramPtr->N_p; i++)
XT_genSinogram.c:				SinogramPtr->Projection[i][k][slice] = BH_QUAD_COEF*temp*temp + temp;
XT_genSinogram.c:				sino_avg += SinogramPtr->Projection[i][k][slice];
XT_genSinogram.c:	sino_avg = sino_avg/(SinogramPtr->N_p*SinogramPtr->N_r*SinogramPtr->N_t);
XT_genSinogram.c:	weight_avg = weight_avg/(SinogramPtr->N_p*SinogramPtr->N_r*SinogramPtr->N_t);
XT_ICD_update.backup.c:  for (i = 0; i < SinogramPtr->N_p; i++)
XT_ICD_update.backup.c:    for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.backup.c:    	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.backup.c:		if (SinogramPtr->ProjSelect[i][j][k] == true)
XT_ICD_update.backup.c:  N_r = SinogramPtr->N_r;
XT_ICD_update.backup.c:  N_t = SinogramPtr->N_t;*/
XT_ICD_update.backup.c:  uint8_t AvgNumXElements = (uint8_t)ceil(3*ScannedObjectPtr->delta_xy/SinogramPtr->delta_r);
XT_ICD_update.backup.c:					if (SinogramPtr->ProjSelect[sino_view][i_r][i_t] == true)
XT_ICD_update.backup.c:					SinogramPtr->ProjSelect[sino_view][i_r][i_t] = true;
XT_ICD_update.backup.c:					SinogramPtr->ProjSelect[sino_view][i_r][i_t] = false;
XT_ICD_update.backup.c:  	uint8_t AvgNumXElements = (uint8_t)ceil(3*ScannedObjectPtr->delta_xy/SinogramPtr->delta_r);
XT_ICD_update.backup.c:	memset(&(ErrorSino[0][0][0]), 0, SinogramPtr->N_p*SinogramPtr->N_t*SinogramPtr->N_r*sizeof(Real_t));	
XT_ICD_update.backup.c:	for(i=0; i < SinogramPtr->N_p; i++)
XT_ICD_update.backup.c:    	for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.backup.c:    	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.backup.c:			ErrorSino[i][j][k]=SinogramPtr->Projection[i][j][k] - ErrorSino[i][j][k] - SinogramPtr->ProjOffset[j][k];
XT_ICD_update.backup.c:	avg=avg/(SinogramPtr->N_r*SinogramPtr->N_t*SinogramPtr->N_p);
XT_ICD_update.backup.c:	dimTiff[0] = 1; dimTiff[1] = SinogramPtr->N_p; dimTiff[2] = SinogramPtr->N_r; dimTiff[3] = SinogramPtr->N_t;
XT_ICD_update.backup.c:/*	memset(&(num[0][0]), 0, SinogramPtr->N_r*SinogramPtr->N_t*sizeof(Real_t));
XT_ICD_update.backup.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.backup.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.backup.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.backup.c:		ErrorSino[k][i][j] += SinogramPtr->ProjOffset[i][j];
XT_ICD_update.backup.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.backup.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.backup.c:		SinogramPtr->ProjOffset[i][j] = num[i][j]/den[i][j];
XT_ICD_update.backup.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.backup.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.backup.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.backup.c:		ErrorSino[k][i][j] -= SinogramPtr->ProjOffset[i][j]; */
XT_ICD_update.backup.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.backup.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.backup.c:		for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.backup.c:			ErrorSino[k][i][j] += SinogramPtr->ProjOffset[i][j];
XT_ICD_update.backup.c:		SinogramPtr->ProjOffset[i][j] = numerator/den[i][j];
XT_ICD_update.backup.c:		for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.backup.c:			ErrorSino[k][i][j] -= SinogramPtr->ProjOffset[i][j]; 
XT_ICD_update.backup.c:/*	offset_numerator = (Real_t**)multialloc(sizeof(Real_t), 2, SinogramPtr->N_r, SinogramPtr->N_t);*/
XT_ICD_update.backup.c:	offset_denominator = (Real_t**)multialloc(sizeof(Real_t), 2, SinogramPtr->N_r, SinogramPtr->N_t);
XT_ICD_update.backup.c:	memset(&(offset_denominator[0][0]), 0, SinogramPtr->N_r*SinogramPtr->N_t*sizeof(Real_t));	
XT_ICD_update.backup.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.backup.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.backup.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.backup.c:	H_r = (Real_t **)multialloc(sizeof(Real_t), 2, SinogramPtr->N_p, DETECTOR_RESPONSE_BINS + 1);
XT_ICD_update.backup.c:	AvgNumZElements = (uint8_t)((ScannedObjectPtr->delta_z/SinogramPtr->delta_t) + 2);
XT_ICD_update.backup.c:	dimTiff[0] = 1; dimTiff[1] = 1; dimTiff[2] = SinogramPtr->N_p; dimTiff[3] = DETECTOR_RESPONSE_BINS+1;
XT_ICD_update.backup.c:	ErrorSino = (Real_t***)multialloc(sizeof(Real_t), 3, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t);
XT_ICD_update.backup.c:	multifree(SinogramPtr->Projection,3);
XT_ICD_update.backup.c:	dimTiff[0] = 1; dimTiff[1] = SinogramPtr->N_p; dimTiff[2] = SinogramPtr->N_r; dimTiff[3] = SinogramPtr->N_t;
XT_ICD_update.backup.c:	for (i = 0; i < SinogramPtr->N_p; i++)
XT_ICD_update.backup.c:	for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.backup.c:	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.c:  for (i = 0; i < SinogramPtr->N_p; i++)
XT_ICD_update.c:    for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.c:    	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.c:		if (SinogramPtr->ProjSelect[i][j][k] == true)
XT_ICD_update.c:  N_r = SinogramPtr->N_r;
XT_ICD_update.c:  N_t = SinogramPtr->N_t;*/
XT_ICD_update.c:  uint8_t AvgNumXElements = (uint8_t)ceil(3*ScannedObjectPtr->delta_xy/SinogramPtr->delta_r);
XT_ICD_update.c:				if (SinogramPtr->ProjSelect[sino_view][i_r][i_t] == true)
XT_ICD_update.c:					SinogramPtr->ProjSelect[sino_view][i_r][i_t] = true;
XT_ICD_update.c:					SinogramPtr->ProjSelect[sino_view][i_r][i_t] = false;
XT_ICD_update.c:  	uint8_t AvgNumXElements = (uint8_t)ceil(3*ScannedObjectPtr->delta_xy/SinogramPtr->delta_r);
XT_ICD_update.c:	memset(&(ErrorSino[0][0][0]), 0, SinogramPtr->N_p*SinogramPtr->N_t*SinogramPtr->N_r*sizeof(Real_t));	
XT_ICD_update.c:	for(i=0; i < SinogramPtr->N_p; i++)
XT_ICD_update.c:    	for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.c:    	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.c:			ErrorSino[i][j][k]=SinogramPtr->Projection[i][j][k] - ErrorSino[i][j][k] - SinogramPtr->ProjOffset[j][k];
XT_ICD_update.c:				SinogramPtr->ProjSelect[i][j][k] = true;
XT_ICD_update.c:				SinogramPtr->ProjSelect[i][j][k] = false;
XT_ICD_update.c:	avg=avg/(SinogramPtr->N_r*SinogramPtr->N_t*SinogramPtr->N_p);
XT_ICD_update.c:	dimTiff[0] = 1; dimTiff[1] = SinogramPtr->N_p; dimTiff[2] = SinogramPtr->N_r; dimTiff[3] = SinogramPtr->N_t;
XT_ICD_update.c:/*	memset(&(num[0][0]), 0, SinogramPtr->N_r*SinogramPtr->N_t*sizeof(Real_t));
XT_ICD_update.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.c:		ErrorSino[k][i][j] += SinogramPtr->ProjOffset[i][j];
XT_ICD_update.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.c:		SinogramPtr->ProjOffset[i][j] = num[i][j]/den[i][j];
XT_ICD_update.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.c:		ErrorSino[k][i][j] -= SinogramPtr->ProjOffset[i][j]; */
XT_ICD_update.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.c:		for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.c:			ErrorSino[k][i][j] += SinogramPtr->ProjOffset[i][j];
XT_ICD_update.c:			if (SinogramPtr->ProjSelect[k][i][j] == true)
XT_ICD_update.c:		SinogramPtr->ProjOffset[i][j] = numerator/denominator;
XT_ICD_update.c:		for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.c:			ErrorSino[k][i][j] -= SinogramPtr->ProjOffset[i][j]; 
XT_ICD_update.c:				SinogramPtr->ProjSelect[k][i][j] = true;
XT_ICD_update.c:				SinogramPtr->ProjSelect[k][i][j] = false;
XT_ICD_update.c:/*	offset_numerator = (Real_t**)multialloc(sizeof(Real_t), 2, SinogramPtr->N_r, SinogramPtr->N_t);
XT_ICD_update.c:	memset(&(offset_denominator[0][0]), 0, SinogramPtr->N_r*SinogramPtr->N_t*sizeof(Real_t));	
XT_ICD_update.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.c:	H_r = (Real_t **)multialloc(sizeof(Real_t), 2, SinogramPtr->N_p, DETECTOR_RESPONSE_BINS + 1);
XT_ICD_update.c:	AvgNumZElements = (uint8_t)((ScannedObjectPtr->delta_z/SinogramPtr->delta_t) + 2);
XT_ICD_update.c:	dimTiff[0] = 1; dimTiff[1] = 1; dimTiff[2] = SinogramPtr->N_p; dimTiff[3] = DETECTOR_RESPONSE_BINS+1;
XT_ICD_update.c:	ErrorSino = (Real_t***)multialloc(sizeof(Real_t), 3, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t);
XT_ICD_update.c:	multifree(SinogramPtr->Projection,3);
XT_ICD_update.c:	dimTiff[0] = 1; dimTiff[1] = SinogramPtr->N_p; dimTiff[2] = SinogramPtr->N_r; dimTiff[3] = SinogramPtr->N_t;
XT_ICD_update.c:	for (i = 0; i < SinogramPtr->N_p; i++)
XT_ICD_update.c:	for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.c:	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.change.c:  for (i = 0; i < SinogramPtr->N_p; i++)
XT_ICD_update.change.c:    for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.change.c:    	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.change.c:  N_r = SinogramPtr->N_r;
XT_ICD_update.change.c:  N_t = SinogramPtr->N_t;*/
XT_ICD_update.change.c:  uint8_t AvgNumXElements = (uint8_t)ceil(3*ScannedObjectPtr->delta_xy/SinogramPtr->delta_r);
XT_ICD_update.change.c:  	uint8_t AvgNumXElements = (uint8_t)ceil(3*ScannedObjectPtr->delta_xy/SinogramPtr->delta_r);
XT_ICD_update.change.c:	memset(&(ErrorSino[0][0][0]), 0, SinogramPtr->N_p*SinogramPtr->N_t*SinogramPtr->N_r*sizeof(Real_t));	
XT_ICD_update.change.c:	for(i=0; i < SinogramPtr->N_p; i++)
XT_ICD_update.change.c:    	for (j = 0; j < SinogramPtr->N_r; j++)
XT_ICD_update.change.c:    	for (k = 0; k < SinogramPtr->N_t; k++)
XT_ICD_update.change.c:			ErrorSino[i][j][k]=SinogramPtr->Projection[i][j][k] - ErrorSino[i][j][k] - SinogramPtr->ProjOffset[j][k];
XT_ICD_update.change.c:	avg=avg/(SinogramPtr->N_r*SinogramPtr->N_t*SinogramPtr->N_p);
XT_ICD_update.change.c:	memset(&(num[0][0]), 0, SinogramPtr->N_r*SinogramPtr->N_t*sizeof(Real_t));
XT_ICD_update.change.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.change.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.change.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.change.c:		ErrorSino[k][i][j] += SinogramPtr->ProjOffset[i][j];
XT_ICD_update.change.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.change.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.change.c:		SinogramPtr->ProjOffset[i][j] = num[i][j]/den[i][j];
XT_ICD_update.change.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.change.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.change.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.change.c:		ErrorSino[k][i][j] -= SinogramPtr->ProjOffset[i][j]; 
XT_ICD_update.change.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.change.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.change.c:		for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.change.c:			ErrorSino[k][i][j] += SinogramPtr->ProjOffset[i][j];
XT_ICD_update.change.c:		SinogramPtr->ProjOffset[i][j] = numerator/den[i][j];
XT_ICD_update.change.c:		for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.change.c:			ErrorSino[k][i][j] -= SinogramPtr->ProjOffset[i][j]; 
XT_ICD_update.change.c:	offset_numerator = (Real_t**)multialloc(sizeof(Real_t), 2, SinogramPtr->N_r, SinogramPtr->N_t);
XT_ICD_update.change.c:	offset_denominator = (Real_t**)multialloc(sizeof(Real_t), 2, SinogramPtr->N_r, SinogramPtr->N_t);
XT_ICD_update.change.c:	memset(&(offset_denominator[0][0]), 0, SinogramPtr->N_r*SinogramPtr->N_t*sizeof(Real_t));	
XT_ICD_update.change.c:	for (k = 0; k < SinogramPtr->N_p; k++)
XT_ICD_update.change.c:	for (i = 0; i < SinogramPtr->N_r; i++)
XT_ICD_update.change.c:	for (j = 0; j < SinogramPtr->N_t; j++)
XT_ICD_update.change.c:	H_r = (Real_t **)multialloc(sizeof(Real_t), 2, SinogramPtr->N_p, DETECTOR_RESPONSE_BINS + 1);
XT_ICD_update.change.c:	AvgNumZElements = (uint8_t)((ScannedObjectPtr->delta_z/SinogramPtr->delta_t) + 2);
XT_ICD_update.change.c:	dimTiff[0] = 1; dimTiff[1] = 1; dimTiff[2] = SinogramPtr->N_p; dimTiff[3] = DETECTOR_RESPONSE_BINS+1;
XT_ICD_update.change.c:	ErrorSino = (Real_t***)multialloc(sizeof(Real_t), 3, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t);
XT_ICD_update.change.c:	multifree(SinogramPtr->Projection,3);
XT_Init.c:	ViewIndex = (int32_t*)get_spc(SinogramPtr->N_p, sizeof(int32_t));
XT_Init.c:	for (i=0; i<SinogramPtr->N_p; i++){
XT_Init.c:			projection_time = SinogramPtr->TimePtr[i];
XT_Init.c:                                SinogramPtr->ViewPtr[index] = (Real_t)atof(str)*M_PI/180.0;
XT_Init.c:                                SinogramPtr->TimePtr[index] = time;
XT_Init.c:	if(index != SinogramPtr->N_p){
XT_Init.c:		fprintf(TomoInputsPtr->debug_file_ptr, "ERROR: Number of projections read is %d and expected is %d\n", index, SinogramPtr->N_p);
XT_Init.c:        SinogramPtr->ViewPtr = (Real_t*)get_spc(SinogramPtr->N_p, sizeof(Real_t));
XT_Init.c:        SinogramPtr->TimePtr = (Real_t*)get_spc(SinogramPtr->N_p, sizeof(Real_t));
XT_Init.c:        for (i=0; i<SinogramPtr->N_p; i++){
XT_Init.c:                    fprintf(TomoInputsPtr->debug_file_ptr, "time %f - ", SinogramPtr->TimePtr[i]);
XT_Init.c:                    fprintf(TomoInputsPtr->debug_file_ptr, "%f, ", SinogramPtr->ViewPtr[i]);
XT_Init.c:			fprintf(TomoInputsPtr->debug_file_ptr, "%.1f, ", SinogramPtr->ViewPtr[sino_view]*180/M_PI);
XT_Init.c:  SinogramPtr->cosine=(Real_t*)get_spc(SinogramPtr->N_p, sizeof(Real_t));
XT_Init.c:  SinogramPtr->sine=(Real_t*)get_spc(SinogramPtr->N_p, sizeof(Real_t));
XT_Init.c:  for(i=0;i<SinogramPtr->N_p;i++)
XT_Init.c:    SinogramPtr->cosine[i]=cos(SinogramPtr->ViewPtr[i]);
XT_Init.c:    SinogramPtr->sine[i]=sin(SinogramPtr->ViewPtr[i]);
XT_Init.c:	SinogramPtr->Length_T = SinogramPtr->Length_T*(SinogramPtr->slice_end - SinogramPtr->slice_begin + 1)/SinogramPtr->total_t_slices;
XT_Init.c:	SinogramPtr->N_t = SinogramPtr->slice_end - SinogramPtr->slice_begin + 1;
XT_Init.c:	if (SinogramPtr->N_t % (int32_t)ScannedObjectPtr->delta_z != 0){
XT_Init.c:		printf("initStructures: Cannot do reconstruction since delta_z = %d does not divide %d\n", (int32_t)ScannedObjectPtr->delta_z, SinogramPtr->N_t);
XT_Init.c:	if (SinogramPtr->N_r % (int32_t)ScannedObjectPtr->delta_xy != 0){
XT_Init.c:		printf("initStructures: Cannot do reconstruction since delta_xy = %d does not divide %d\n", (int32_t)ScannedObjectPtr->delta_xy, SinogramPtr->N_r);
XT_Init.c:	SinogramPtr->delta_r = SinogramPtr->Length_R/(SinogramPtr->N_r);
XT_Init.c:	SinogramPtr->delta_t = SinogramPtr->Length_T/(SinogramPtr->N_t);
XT_Init.c:	SinogramPtr->R0 = -TomoInputsPtr->RotCenter*SinogramPtr->delta_r;
XT_Init.c:	SinogramPtr->RMax = (SinogramPtr->N_r-TomoInputsPtr->RotCenter)*SinogramPtr->delta_r;
XT_Init.c:	SinogramPtr->T0 = -SinogramPtr->Length_T/2.0;
XT_Init.c:	SinogramPtr->TMax = SinogramPtr->Length_T/2.0;
XT_Init.c:	ScannedObjectPtr->Length_X = SinogramPtr->Length_R;
XT_Init.c:    	ScannedObjectPtr->Length_Y = SinogramPtr->Length_R;
XT_Init.c:	ScannedObjectPtr->Length_Z = SinogramPtr->Length_T;
XT_Init.c:    	ScannedObjectPtr->N_x = (int32_t)(SinogramPtr->N_r/ScannedObjectPtr->delta_xy);
XT_Init.c:	ScannedObjectPtr->N_y = (int32_t)(SinogramPtr->N_r/ScannedObjectPtr->delta_xy);
XT_Init.c:	ScannedObjectPtr->N_z = (int32_t)(SinogramPtr->N_t/ScannedObjectPtr->delta_z);	
XT_Init.c:	ScannedObjectPtr->delta_xy = ScannedObjectPtr->delta_xy*SinogramPtr->delta_r;
XT_Init.c:	ScannedObjectPtr->delta_z = ScannedObjectPtr->delta_z*SinogramPtr->delta_t;
XT_Init.c:	SinogramPtr->Projection = (Real_t***)multialloc(sizeof(Real_t), 3, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t);
XT_Init.c:	SinogramPtr->ProjSelect = (bool***)multialloc(sizeof(bool), 3, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t);
XT_Init.c:	for (i = 0; i < SinogramPtr->N_p; i++)
XT_Init.c:	for (j = 0; j < SinogramPtr->N_r; j++)
XT_Init.c:	for (k = 0; k < SinogramPtr->N_t; k++)
XT_Init.c:		SinogramPtr->ProjSelect[i][j][k] = true;
XT_Init.c:	SinogramPtr->ProjOffset = (Real_t**)multialloc(sizeof(Real_t), 2, SinogramPtr->N_r, SinogramPtr->N_t);
XT_Init.c:	TomoInputsPtr->Weight = (Real_t***)multialloc(sizeof(Real_t), 3, SinogramPtr->N_p, SinogramPtr->N_r, SinogramPtr->N_t);
XT_Init.c:	memset(&(SinogramPtr->ProjOffset[0][0]), 0, SinogramPtr->N_t*SinogramPtr->N_r*sizeof(Real_t));
XT_Init.c:			OffsetTemp = (Real_t**)multialloc(sizeof(Real_t), 2, SinogramPtr->N_r/prev_mult_xy, SinogramPtr->N_t/prev_mult_z);
XT_Init.c:			Read4mBin (projOffset_file, 1, 1, SinogramPtr->N_r/prev_mult_xy, SinogramPtr->N_t/prev_mult_z, &(OffsetTemp[0][0]), TomoInputsPtr->debug_file_ptr);
XT_Init.c:			for (i = 0; i < SinogramPtr->N_r/prev_mult_xy; i++)
XT_Init.c:			for (j = 0; j < SinogramPtr->N_t/prev_mult_z; j++)
XT_Init.c:				SinogramPtr->ProjOffset[i*prev_mult_xy + p][j*prev_mult_z + q] = OffsetTemp[i][j];
XT_Init.c:			Read4mBin (projOffset_file, 1, 1, SinogramPtr->N_r, SinogramPtr->N_t, &(SinogramPtr->ProjOffset[0][0]), TomoInputsPtr->debug_file_ptr);
XT_Init.c:		dim[0] = 1; dim[1] = 1; dim[2] = SinogramPtr->N_r; dim[3] = SinogramPtr->N_t;
XT_Init.c:			WriteMultiDimArray2Tiff (projOffset_file, dim, 0, 1, 2, 3, &(SinogramPtr->ProjOffset[0][0]), 0, TomoInputsPtr->debug_file_ptr);
XT_Init.c:	ScannedObjectPtr->x0 = SinogramPtr->R0;
XT_Init.c:    	ScannedObjectPtr->z0 = SinogramPtr->T0;
XT_Init.c:    	ScannedObjectPtr->BeamWidth = SinogramPtr->delta_r; /*Weighting of the projections at different points of the detector*/
XT_Init.c:	SinogramPtr->OffsetR = (ScannedObjectPtr->delta_xy/sqrt(2.0)+SinogramPtr->delta_r/2.0)/DETECTOR_RESPONSE_BINS;
XT_Init.c:	SinogramPtr->OffsetT = ((ScannedObjectPtr->delta_z/2) + SinogramPtr->delta_t/2)/DETECTOR_RESPONSE_BINS;
XT_Init.c:		case 'g': SinogramPtr->Length_R = (Real_t)atof(optarg);	break;
XT_Init.c:		case '3': SinogramPtr->Length_T = (Real_t)atof(optarg);	break;
XT_Init.c:		case 'v': SinogramPtr->N_p = (int32_t)atoi(optarg); 		break;	
XT_Init.c:		case 'w': SinogramPtr->N_r = (int32_t)atoi(optarg); 		break;	
XT_Init.c:		case '1': SinogramPtr->slice_begin = (int32_t)atoi(optarg); 		break;	
XT_Init.c:		case '2': SinogramPtr->slice_end = (int32_t)atoi(optarg); 		break;	
XT_Init.c:		case '6': SinogramPtr->total_t_slices = (int32_t)atoi(optarg); 		break;	
XT_Init.c:		SinogramPtr->total_t_slices = SinogramPtr->total_t_slices/ScannedObjectPtr->mult_z;
XT_Init.c:		SinogramPtr->slice_end = (SinogramPtr->slice_end + 1)/ScannedObjectPtr->mult_z - 1;
XT_Init.c:		SinogramPtr->N_r = SinogramPtr->N_r/ScannedObjectPtr->mult_xy;
XT_Init.c:		fprintf(TomoInputsPtr->debug_file_ptr, "argsParser: p = %.2f, sigma_s = %f, sigma_t = %f, c_s = %.3f, c_t = %.3f, delta_xy = %f, delta_z = %f, Length_R = %.2f, Length_T = %.2f, stop threshold = %.2f, number of iterations = %d, center of rotation = %.2f, alpha = %.2f, time regularization = %d, read sinogram from bin = %d, init ICD = %d, Write Tiff file = %d, Don't add noise = %d, Reconstruction start time = %f, Reconstruction time gap = %f, number of reconstructions = %d, N_p = %d, N_r = %d, reconstruct = %d, cost_thresh = %f, PHANTOM_FILENAME = %s, Slice Begin = %d, Slice End = %d, Phantom X-Y Resolution = %d, Phantom Z Resolution = %d, N_t = %d, radius of object = %f, Update additive offset error = %d, no_NHICD = %d, Write Tiff and Bin every Iteration = %d, only Edge Updates = %d, Zinger threshold T = %f, Zinger Delta = %f\n",ScannedObjectPtr->MRF_P, ScannedObjectPtr->Sigma_S, ScannedObjectPtr->Sigma_T, ScannedObjectPtr->C_S, ScannedObjectPtr->C_T, ScannedObjectPtr->delta_xy, ScannedObjectPtr->delta_z, SinogramPtr->Length_R, SinogramPtr->Length_T, TomoInputsPtr->StopThreshold, TomoInputsPtr->NumIter, TomoInputsPtr->RotCenter, TomoInputsPtr->alpha, TomoInputsPtr->time_reg, TomoInputsPtr->sinobin, TomoInputsPtr->initICD, TomoInputsPtr->Write2Tiff, TomoInputsPtr->No_Projection_Noise, ScannedObjectPtr->Rtime0, ScannedObjectPtr->delta_Rtime, ScannedObjectPtr->N_time, SinogramPtr->N_p, SinogramPtr->N_r, TomoInputsPtr->reconstruct, TomoInputsPtr->cost_thresh, PHANTOM_FILENAME, SinogramPtr->slice_begin, SinogramPtr->slice_end, TomoInputsPtr->phantom_N_xy, TomoInputsPtr->phantom_N_z, SinogramPtr->total_t_slices, TomoInputsPtr->radius_obj, TomoInputsPtr->updateProjOffset, TomoInputsPtr->no_NHICD, TomoInputsPtr->WritePerIter, TomoInputsPtr->only_Edge_Updates, TomoInputsPtr->ErrorSinoThresh, TomoInputsPtr->ErrorSinoDelta);
XT_IOMisc.c:	dim[0] = 1; dim[1] = 1; dim[2] = SinogramPtr->N_r; dim[3] = SinogramPtr->N_t;
XT_IOMisc.c:	Write2Bin (projOffset_file, 1, 1, SinogramPtr->N_r, SinogramPtr->N_t, &(SinogramPtr->ProjOffset[0][0]), TomoInputsPtr->debug_file_ptr);
XT_IOMisc.c:		WriteMultiDimArray2Tiff (projOffset_file, dim, 0, 1, 2, 3, &(SinogramPtr->ProjOffset[0][0]), 0, TomoInputsPtr->debug_file_ptr);
XT_Profile.c:	for (i=0;i<(int32_t)SinogramPtr->N_p;i++)
XT_Profile.c:		angle = SinogramPtr->ViewPtr[i];
XT_Profile.c:			MaxValLineIntegral = ScannedObjectPtr->delta_xy/cos(angle)/SinogramPtr->delta_t;
XT_Profile.c:			MaxValLineIntegral = ScannedObjectPtr->delta_xy/cos(M_PI_2-angle)/SinogramPtr->delta_t;
XT_Profile.c:  VoxProfile = (Real_t**)multialloc(sizeof(Real_t),2,SinogramPtr->N_p,PROFILE_RESOLUTION);
XT_Profile.c:  dimTiff[2] = SinogramPtr->N_p;
XT_Profile.c:  for(k = 0 ; k < (int32_t) SinogramPtr->N_p; k++)
XT_Profile.c:      ProfileCenterR = i*SinogramPtr->OffsetR;
XT_Profile.c:      ProfileCenterT = i * SinogramPtr->OffsetT;
XT_Profile.c:      if(ScannedObjectPtr->delta_z >= SinogramPtr->delta_t)
XT_Profile.c:        if(ProfileCenterT <= ((ScannedObjectPtr->delta_z/2) - (SinogramPtr->delta_t/2)))
XT_Profile.c:          H_t[i] = SinogramPtr->delta_t;
XT_Profile.c:          H_t[i] = -ProfileCenterT + (ScannedObjectPtr->delta_z / 2) + SinogramPtr->delta_t / 2;
XT_Profile.c:        if(ProfileCenterT <= SinogramPtr->delta_t/2 - ScannedObjectPtr->delta_z/2)
XT_Profile.c:          H_t[i] = -ProfileCenterT + (ScannedObjectPtr->delta_z/2) + SinogramPtr->delta_t/2;
XT_Profile.c:    tmin = (t - ScannedObjectPtr->delta_z / 2) > SinogramPtr->T0 ? t - ScannedObjectPtr->delta_z / 2 : SinogramPtr->T0;
XT_Profile.c:    tmax = (t + ScannedObjectPtr->delta_z / 2) <= SinogramPtr->TMax ? t + ScannedObjectPtr->delta_z / 2 : SinogramPtr->TMax;
XT_Profile.c:    slice_index_min = (int32_t)(floor((tmin - SinogramPtr->T0) / SinogramPtr->delta_t));
XT_Profile.c:    slice_index_max = (int32_t)(floor((tmax - SinogramPtr->T0) / SinogramPtr->delta_t));
XT_Profile.c:    if(slice_index_max >= SinogramPtr->N_t)
XT_Profile.c:      slice_index_max = SinogramPtr->N_t - 1;
XT_Profile.c:      center_t = ((Real_t)i_t + 0.5) * SinogramPtr->delta_t + SinogramPtr->T0;
XT_Profile.c:      index_delta_t = (int32_t)(floor(delta_t / SinogramPtr->OffsetT));
XT_Profile.c:        w3 = delta_t - (Real_t)(index_delta_t) * SinogramPtr->OffsetT;
XT_Profile.c:        w4 = ((Real_t)index_delta_t + 1) * SinogramPtr->OffsetT - delta_t;
XT_Profile.c:        ProfileThickness = (w4 / SinogramPtr->OffsetT) * H_t[index_delta_t]+ (w3 / SinogramPtr->OffsetT) * H_t[index_delta_t+1];
XT_Profile.c:    /*  ProfileThickness = (w4 / OffsetT) * detectorResponse->d[0][uint16_t(floor(SinogramPtr->N_theta/2))][index_delta_t]
XT_Profile.c:        + (w3 / OffsetT) * detectorResponse->d[0][uint16_t(floor(SinogramPtr->N_theta/2))][index_delta_t + 1 < DETECTOR_RESPONSE_BINS ? index_delta_t + 1 : DETECTOR_RESPONSE_BINS - 1];*/
